import os
import sqlite3
from flask import Flask, request, abort
from dotenv import load_dotenv
from geopy.distance import geodesic
from linebot import LineBotApi, WebhookHandler
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage,
    QuickReply, QuickReplyButton, MessageAction
)

import urllib.parse
import requests

# ËºâÂÖ• .env
load_dotenv()

app = Flask(__name__)

line_bot_api = LineBotApi(os.getenv("LINE_CHANNEL_ACCESS_TOKEN"))
handler = WebhookHandler(os.getenv("LINE_CHANNEL_SECRET"))

GOOGLE_API_KEY = os.getenv("GOOGLE_MAPS_API_KEY")

user_states = {}

# Âª∫Á´ãË≥áÊñôË°®
def init_db():
    conn = sqlite3.connect("rides.db")
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS ride_records (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT,
            origin TEXT,
            destination TEXT,
            ride_type TEXT,
            time TEXT,
            payment TEXT,
            origin_lat REAL,
            origin_lng REAL
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# Âú∞ÁêÜ‰ΩçÁΩÆÊü•Ë©¢
def geocode_location(location):
    encoded = urllib.parse.quote(location)
    url = f"https://maps.googleapis.com/maps/api/geocode/json?address={encoded}&key={GOOGLE_API_KEY}"
    try:
        res = requests.get(url).json()
        if res["status"] == "OK":
            latlng = res["results"][0]["geometry"]["location"]
            return (latlng["lat"], latlng["lng"])
    except:
        return None
    return None

@app.route("/")
def home():
    return "LineBot Running"

@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers["X-Line-Signature"]
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except:
        abort(400)
    return "OK"

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    user_input = event.message.text.strip()

    if user_input == "Êü•Ë©¢ÊàëÁöÑÈ†êÁ¥Ñ":
        conn = sqlite3.connect("rides.db")
        c = conn.cursor()
        c.execute("SELECT * FROM ride_records WHERE user_id = ?", (user_id,))
        records = c.fetchall()
        conn.close()
        if not records:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage("‰Ω†ÁõÆÂâçÊ≤íÊúâÈ†êÁ¥ÑÁ¥ÄÈåÑ„ÄÇ")
            )
            return
        latest = records[-1]
        origin, destination, ride_type, time, payment = latest[2:7]

        match = None
        if ride_type == "ÂÖ±‰πò":
            conn = sqlite3.connect("rides.db")
            c = conn.cursor()
            c.execute("SELECT * FROM ride_records WHERE user_id != ? AND ride_type = 'ÂÖ±‰πò'", (user_id,))
            others = c.fetchall()
            conn.close()
            for o in others:
                other_lat, other_lng = o[7], o[8]
                my_lat, my_lng = latest[7], latest[8]
                if geodesic((my_lat, my_lng), (other_lat, other_lng)).meters <= 500:
                    my_time = latest[5]
                    other_time = o[5]
                    if abs(to_minutes(my_time) - to_minutes(other_time)) <= 10:
                        match = o
                        break

        msg = (
            "üìã ÊúÄËøëÁöÑÈ†êÁ¥ÑÔºö\n"
            f"üõ´ Âá∫ÁôºÂú∞Ôºö{origin}\n"
            f"üõ¨ ÁõÆÁöÑÂú∞Ôºö{destination}\n"
            f"üöò ÂÖ±‰πòÔºö{ride_type}\n"
            f"üïê ÊôÇÈñìÔºö{time}\n"
            f"üí≥ ‰ªòÊ¨æÔºö{payment}\n"
        )
        if match:
            msg += "‚úÖ Â∑≤ÊâæÂà∞ÂÖ±‰πòÂ∞çË±°ÔºÅ"
        else:
            msg += "‚è≥ Â∞öÊú™ÊúâÂÖ±‰πòÂ∞çË±°"

        line_bot_api.reply_message(event.reply_token, TextSendMessage(msg))
        return

    if "Âà∞" in user_input and "ÊàëÈ†êÁ¥Ñ" not in user_input:
        try:
            origin, destination = map(str.strip, user_input.split("Âà∞"))
        except:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë´ãËº∏ÂÖ•Ê†ºÂºèÁÇ∫„ÄéÂá∫ÁôºÂú∞ Âà∞ ÁõÆÁöÑÂú∞„Äè"))
            return

        user_states[user_id] = {"origin": origin, "destination": destination}

        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(
                text=f"üöï ‰Ω†Ë¶ÅÂæû {origin} Âà∞ {destination}„ÄÇ\nË´ãÈÅ∏ÊìáÊòØÂê¶ÂÖ±‰πòÔºö",
                quick_reply=QuickReply(items=[
                    QuickReplyButton(action=MessageAction(label="ÊàëË¶ÅÂÖ±‰πò", text="ÊàëÈÅ∏ÊìáÂÖ±‰πò")),
                    QuickReplyButton(action=MessageAction(label="ÊàëË¶ÅËá™Â∑±Êê≠", text="Êàë‰∏çÂÖ±‰πò"))
                ])
            )
        )
        return

    if user_input in ["ÊàëÈÅ∏ÊìáÂÖ±‰πò", "Êàë‰∏çÂÖ±‰πò"]:
        ride_type = "ÂÖ±‰πò" if "ÂÖ±‰πò" in user_input else "‰∏çÂÖ±‰πò"
        if user_id not in user_states:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë´ãÂÖàËº∏ÂÖ•„ÄéÂá∫ÁôºÂú∞ Âà∞ ÁõÆÁöÑÂú∞„Äè"))
            return
        user_states[user_id]["ride_type"] = ride_type
        line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë´ãËº∏ÂÖ•È†êÁ¥ÑÊôÇÈñìÔºå‰æãÂ¶ÇÔºöÊàëÈ†êÁ¥Ñ 15:30"))
        return

    if user_input.startswith("ÊàëÈ†êÁ¥Ñ"):
        time = user_input.replace("ÊàëÈ†êÁ¥Ñ", "").strip()
        if user_id not in user_states or "ride_type" not in user_states[user_id]:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë´ãÂÖàËº∏ÂÖ•Âá∫ÁôºÂú∞ÂíåÂÖ±‰πòÈÅ∏È†Ö"))
            return
        user_states[user_id]["time"] = time
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(
                text="Ë´ãÈÅ∏Êìá‰ªòÊ¨æÊñπÂºèÔºö",
                quick_reply=QuickReply(items=[
                    QuickReplyButton(action=MessageAction(label="LINE Pay", text="Êàë‰ΩøÁî® LINE Pay")),
                    QuickReplyButton(action=MessageAction(label="ÁèæÈáë", text="Êàë‰ΩøÁî® ÁèæÈáë")),
                    QuickReplyButton(action=MessageAction(label="ÊÇ†ÈÅäÂç°", text="Êàë‰ΩøÁî® ÊÇ†ÈÅäÂç°"))
                ])
            )
        )
        return

    if user_input.startswith("Êàë‰ΩøÁî®"):
        payment = user_input.replace("Êàë‰ΩøÁî®", "").strip()
        if user_id not in user_states or "time" not in user_states[user_id]:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë´ãÂÖàÂÆåÊàêÈ†êÁ¥ÑÊµÅÁ®ã"))
            return

        data = user_states[user_id]
        origin_coords = geocode_location(data["origin"])
        if not origin_coords:
            line_bot_api.reply_message(event.reply_token, TextSendMessage("Êü•Ë©¢Âú∞ÈªûÂ§±ÊïóÔºåË´ãÁ¢∫Ë™çÂú∞ÂêçÊòØÂê¶Ê≠£Á¢∫"))
            return

        conn = sqlite3.connect("rides.db")
        c = conn.cursor()
        c.execute('''
            INSERT INTO ride_records (user_id, origin, destination, ride_type, time, payment, origin_lat, origin_lng)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id,
            data["origin"],
            data["destination"],
            data["ride_type"],
            data["time"],
            payment,
            origin_coords[0],
            origin_coords[1]
        ))
        conn.commit()
        conn.close()

        route_url = f"https://www.google.com/maps/dir/{urllib.parse.quote(data['origin'])}/{urllib.parse.quote(data['destination'])}"

        msg = (
            "üéâ È†êÁ¥ÑÂÆåÊàêÔºÅ\n"
            f"üõ´ Âá∫ÁôºÂú∞Ôºö{data['origin']}\n"
            f"üõ¨ ÁõÆÁöÑÂú∞Ôºö{data['destination']}\n"
            f"üöò ÂÖ±‰πòÁãÄÊÖãÔºö{data['ride_type']}\n"
            f"üïê È†êÁ¥ÑÊôÇÈñìÔºö{data['time']}\n"
            f"üí≥ ‰ªòÊ¨æÊñπÂºèÔºö{payment}\n"
            f"üìç Ë∑ØÁ∑öÈ†êË¶ΩÔºö{route_url}\n"
            "üëâ Ëã•Ë¶ÅÂÜçÊ¨°È†êÁ¥ÑÔºåË´ãËº∏ÂÖ•„ÄéÂá∫ÁôºÂú∞ Âà∞ ÁõÆÁöÑÂú∞„Äè"
        )

        user_states.pop(user_id, None)
        line_bot_api.reply_message(event.reply_token, TextSendMessage(msg))
        return

    line_bot_api.reply_message(event.reply_token, TextSendMessage("Ë´ãËº∏ÂÖ•Ê†ºÂºèÁÇ∫„ÄéÂá∫ÁôºÂú∞ Âà∞ ÁõÆÁöÑÂú∞„Äè"))

def to_minutes(tstr):
    try:
        h, m = map(int, tstr.split(":"))
        return h * 60 + m
    except:
        return 0

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
